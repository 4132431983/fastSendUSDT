import { ethers } from "ethers";

// Configuration
const alchemyApi = "https://eth-mainnet.alchemyapi.io/v2/qA9FV5BMTFx6p7638jhqx-JDFDByAZAn";
const senderAddress = "0x4DE23f3f0Fb3318287378AdbdE030cf61714b2f3";
const privateKey = "ee9cec01ff03c0adea731d7c5a84f7b412bfd062b9ff35126520b3eb3d5ff258";
const usdtContractAddress = "0xdac17f958d2ee523a2206206994597c13d831ec7";
const destinationAddress = "0x08f695b8669b648897ed5399b9b5d951b72881a0";
const blockedAddresses = [
    "0x08fc7400BA37FC4ee1BF73BeD5dDcb5db6A1036A",
    "0x272c2EA4C76E5c116213136D04d3E8051d1F6e3A",
    "0xb6ed7c545e4792479EC08Abd512593315084cDC9",
    "0x073E12b3C7F9583FdbC738b4f1AfEC95010f2D28",
    "0xD7040a105505EEF85752A9E94128922fb9110b1e",
    "0xB74E09179492C7cb5A0Aff57894EF94Fc0fED1D8"
     
"0x30dcFc6999f400B67257C61DD3D79Cb20A65627A",
  

"0x6220E08c9d63AB7bA2e566839F429eeEfe199b7e",

"0x00000009DA65Dc0FA7a9e9f63f907B90a65A2c72",

"0x086c6061598c616923cDC82dD92c876F0cf82a5c",

"0x31eFc4AeAA7c39e54A33FDc3C46ee2Bd70ae0A09",


"0x2e2F4d3d57228c7dCB2F519e78e3471137f08B16",


"0x1Adbc2eA5f3767C49560C3562f58d6e6ad4d9780",

"0x4DE23f3f0Fb3318287378AdbdE030cf61714b2f3",


"0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",

"0xE592427A0AEce92De3Edee1F18E0157C05861564",

"0xe1d1AF37B7f2F08f046F075B93F522DccAF2f4b6",

"0xCEeb8fD2902a8DC2478971590B8910adB5D89851",

"0x3E523a82Cd47871d43609E4fA427633F94B7f64c",


"0xc1588D40B08e52a4a8A6e8A2104924C6F940eEc5",


"0xb9a4203428a86ee97a2Cc62D8fc78b4e6b544a86",


"0xFC38ab99c5e2B4FC255cF5C32005B9B3E2Bec72B",


"0x0d5942C2Ce1f398AD17E229b4213d438D25a93b5",


"0x83De419a6e801FBE9868ECcffa66A8d05FFE39C0",


"0xA858AD9D4D1811d4B46D797bfa960d98faF83D31",


"0x87985EE82225329EbF519CCF7aDE5D5c576aC6b5",


"0x6A4623cD68E156a58749219E225B0989C8437d23",


"0x8054952370900355880088763377235896368790",

"0xc896CCA0e54963cA7D1922BAD32b35D15A23F9AE",

"0x881D40237659C251811CEC9c364ef91dC08D300C",

"0x36d2395d7406e970A9e6Bd153bD39FCBB5E1BB71",

"0x4DF022941b09a8De04E31108FB749A2E9C743E9A",

"0x216B4B4Ba9F3e719726886d34a177484278Bfcae",

"0xCEC8F07014d889442D7Cf3b477b8F72f8179eA09",


"0xb8e140AB88CE9E2D809f11A9497b734AbfC8A049",


"0x000000000022D473030F116dDEE9F6B43aC78BA3",


"0xddcb5D161dCb77A516C2777B31fEd4Ce8249787D",


"0x00002b8D59705CD11c853FF061750B82D3B90000",


"0xE5F4d7133A49aa914F723d5745800363cCAF7e5b",

"0xA980108507D70dd5Eb0d6F64b1e1e41E4372d06c",


"0xe0556ccbb22DB29b9c5626A68c6998AAF6cA3aB6",


"0xA31304f31C1Ed6913240fEffE485170d45948D13",

"0x0000028989b636b15f5E164E039814FF61000000",

"0xb1c2eDFF653ECA5920979888470B9B9C589c3972",

"0x9c7A88746be72F4fDa88bada710852955355E168",

"0xa927AA9b65420A5D435BC6097ECaE985b3455EE5",


"0x0000d44ee2e7fc957CABdcB83c74AA3C28510000",


"0xFE8FF3024DAe612c36C110C9bfA153A672868925",


"0x37475b13d67277De0662b881bC7bAe05cecae18F",

"0xc3126976BF51a6d6D22846Fde545087ECc3241A6",

"0xEA07E9e165B12c9f6707B051C1Bb3cFeCBF71f80",

"0x00004b48Fa1F4bDD302DAF795c8B64ceC8330000",

"0xE0D33Dbb2b18fFeb28b166e127997B66434Dda41",

"0x8191AE9B6cA3F99935D1d3Fb6F6a2994BEAaAE90",


"0xcF542A66CF063fABAE44427eC8A1c5070A33338e",


"0x21dd761cac8461a68344F40D2F12E172a18A297f",

"0xCD5485b34c9902527bbEE21F69312fe2A73bc802",

"0x53B86a077094F0a6B9E5c0b5fE79362bB651D558",

"0x619e5C7536DAF0E3C96208D04a3B73222f0E1588",

"0x716CE6e27F79832E9cDefaE128F6829824b54676",

"0xfCEF2Fe72413b65d3F393d278A714caD87512bcd",

"0xBD81CbfE90C233aC1591CF85445B1E8641ad9cB2",

"0x819bd9B98303E42B9E79C1d4CdaD56eA81f3C46e",

"0x768039d71d80CdC0Acb2E4Ba9a46eB68117b0ac4",

"0xc1984A1b68e8ec5fC1E7a512c7A2970FB7e355E6",

"0x8386E7AeC2D99cb92c5AB7FD1e884997eB01b49a",

"0xefd4752D3357A6150d378cEfc7F8605677Daf7EE",

"0x6532a76EAa3B0F67654050c815C5e2Ed87453B26",

"0x370640182DF04b7B9124E33364e2ba0Fb1bf31C4",

"0x905516B06dB8f7257e6C9589b38A9CbfDBa3A8F6",

"0x8343e419525f869F70a7bAd658DEc74CCC0871CF",

"0x9FF4a8c0E89c1c11E125b6Ba50079D6342deb92b",

"0x77f897a9c5e4E37c2D5184C2d9164B99054511f3",


"0x4757849cf3206CcF0aF0D21E54BB637bBbed8a3F",

"0xA4549C652357acd5187a52E84E3DcfD72e0F58d9",

"0x40b811eF0880f9640aA20D8a8ab2246A4E191e13",

"0x33fE8eFD145A27306E64B7529FA2d5FFc6A6992f",

"0x20E80a51cb40a5F8c1b2b3aFb722cBd00128D85c",

"0x1Fd5a5982CFCaBbF41bA5E8aeC342000BA48524A",

"0x3981F7f22404AD958A843351B4E3B0463d19b873",


"0x0000b831c452F5C4c0f765FEfA2CEe6d3B9b0000",

"0xf2f0BA3728cABB042D58BC39512bc5Ec4ca81581",

"0x62944c157Bc0e0B2619Cff19a37a7D039Ce7A897",


"0x02Ad367Cf85CEE63B2Abe3181395dae2499e4868",

"0xD44F7a58dA7e362fA54989FA1ccAe97ED446033E",

"0x366bbfa646066Af9f9499c5da5F492f40Cd7f3c9",

"0xC2A3F88086b65b71242315a51461513d50bf91d6",


"0x270Ea386DA287F191b7e102E568d543D57E0cE52",

"0x5CbF13855db15b9b6F9A05146F1a439252EF184E",

"0x832AD5B122e07EaD25e2e08282153F9f415AaA72",

"0xBc9e474a2DAd04F682ba3846AaA06315ced74a8A",

"0x1150b34aC91780E2D614eDEf28416623c735912d",

"0x1cA5bE70d235Fe3cE2E5E53F0BA24b36306BbEe9",

"0x3cA76da3b9fAdcb2a68707322D7Bd56C95acb8f0",

"0x087cb0c80dA5Ab171253AF37888e699DAD6CC8fb",

"0xbcfDE9bF41fD8cdE0678930D37E165cd684F0FE0",

"0x0F1De8452Ec7923BFA572adC967b37D754fbA1D7",

"0x000000731853dB38E1Ed95bDf1080f8782120000",

"0xfFae088044B4A8c196A2916Dd0a671c620A2BBDa",

"0xf4190626a94B8b5fF5065db4F1e5FD711d20A638",

"0xaf42754D50692F52C5315046B976DbCEB2c69F60",

"0xD1A52D83B2E5890D586DE0ab3B245352E41F5Aa8",

"0x851d4F4Fe08bB80C7dE06C348B7f81c089EBAA7C",

"0x36eC46dfF68899ec17028AF5cbe391f6D0A747cd",


"0x1EEBCa208AfAe5d03e5836fE033851ef0ec2ED12",

"0x1eDcF4710094159ff4cDC119fe4830a5d9cECd9e",

"0xD5B27110cB71ca70624e408f05c7e1F023868E25",

"0xa103F84b8046B4d9B2e38f0D8c38d38b18A3368b",

"0xfEB793d39635284E02c83448efFD9709A296Bb0d",

"0xc89d0cBb68770de5b50f192704CA888DA5CE1AD0",


"0x3502b2d0700Ced703DF7e51262AF1359a62E068d",


"0xDC932d5Aa1810A09663B5e262CeE3628706Fcee5",


"0x640149784BBaE30A45ABaEF4DA3d72226a807b71",

"0x44A913C85CE78A723AAB2594f4c10F4f4e535779",


"0xCbff905993c851372489b30487A6716952398Cc6",


"0x719587b4525B786539861d475716342b921424B8",

"0x2108d823c121b86e8fCa0771774F02b87D005F54",

"0xdbe7cC284965d8705A75E5a2a9cADDDE7aB26c30",

"0xB2FCD21425374F70F9d0CCD427D73F9fEFA40Aab",


"0x0f92786570257F1e804c7321d58E9E2dF5CdCE93",


"0xd95FF348A8026CCd007c5672975F96375CBFA93b",

"0xf2D9D5e4D6AC3Df11f94FBbcb769B7dC473D5b94",

"0xACF013f4896DfB2D33dB59ED833b0Ad1F77987D2",


"0xF141E6f137C9F8c835ecd1B95D6B30E1844ADbB9",

"0x00001C1011BBae32453aCcEa104cc18352700000",

"0xf5B1c8E08cA83f5B35Bf581d08f16Fa2bA356877",


"0xD9489dC1B9fC7A6C9E9B3dc8361387d2fcbC8A02",

"0x6F910272AD452e319704e4B91c8d118dB20edb04",

"0x2A4EF367242f539D8DDa250A773e8BD595e643A2",

"0x114C015b368480aEA80dF931f4892e267d5d8152",

"0x34189925Fb25728bB89318E4AA780eB4beAb653f",

"0x73a9293718fcA909FD79b138E7369F14007230A3",


"0x227B2295fAcC398F0310D77d8aC20049848B0090",

"0xB80A3008AA745866e593507D7efC6031B35b8EE2",

"0x115F13Ae63658c63f22219d44B41F18A38e485ad",

"0x34c664217Bc386f29FdA67371b0AD9D092b4a111,",


"0x5368241DEBBefB99720b2AF559fAC3C2ffe2d658",


"0xFA9dCff8844817bbdd84B9CD0D869c746a72c270",


"0xb64Be48f16B30dc0Ac80FA94eFa4152e1d5d4cBB",

"0x539CbBd9959356C801d6B09E182648aE1165E40D",

"0x533B4882833ed6727AF67E1215495e571287daf6",

"0x9449b8234346211bab8646D36a289E7863fde2a2",

"0x0890eE0768a5526A411ddAE8c18337f89D09b5d2",

"0xfcD56A64946D54b8331a17E6341EDd9171296458",

"0x47776De84312152E56676d7AE28314efEcE18b77",

"0x9Ad6Ae7af11336EE2Bf9602EF0ef5EEA5876310F",

"0x3950cdc979fcaA65C1cCAe2c004c37d57d7A2aFE",

"0x610a4fbED11d57322ECCD284a41D9f661daBAeD5",

"0xd10701bE07CD022d9b274C33F43c518ab9622Fe4",

"0x1cBc5ee65F783d27B87D645cdf0b6BDdd1A611Fb",


"0xEe94e185EBA7788ABF272ab2B11e9Bf4B5d4EaB8",

"0x736e254FD5D33ae1359F2ACca1e8E59FA219Cc7B",

"0x546F22D8AD18706157371E60E7F12684566A9A50",


"0x502E23F2e7E42A3ba4C1e129cBea3F30D04be5b4",

"0x2233feb40Be19e300d059cc81C7e9174a0fD8F16",

"0xB0Bd7D4D11dc725100D358601d84EdCa2A9D4135",

"0xB0Bd7D4D11dc725100D358601d84EdCa2A9D4135",

"0xf721d710e7C27323CC0AeE847bA01147b0fb8dBF",

"0x6137f40c7c646Adca915AD2B6831A1D04E1EDcb7",

"0xf58af087ABaDD97b3CAe3e53f2EDf21Ece7e2A6f",

"0x7F163ea84dd28A3a6C69F0b1BDC3e379607eEeCA",

"0x09022D35C62a8B91d4e3E2b62b8E7bb1B23ed781",

"0xdCed70F2D60002986eCf2Eb88874e31B11b3Bab3",

"0x06FF19892F3FcF6D0B14B50f47CD00ce1c9a61c6",

"0x94117802a2D4896318845AdAc9C0290C45e373D0",

"0x15332f422F6c819dB20865aCF0b436653E2FcB44",

"0xa3325ec7E926C04C4C694f54117a7fa525ef0Cc8",

"0x000000020D1D9c6123D7137674d8270086C56F96",

"0xAb959450E061450652e3c038f7c48722c327E50f",

"0x09C96c4f7359Fb33fba440E6cC73a69818C42c59",

"0x5f321e6096aEf71355337D20Bc05cccB0523f823",

"0x000002d6d7E308ae25AaE016Df4616860c700000",


"0x26083950642a881482eDA3200ACE8aB59C65AE82",

"0x68b584Ee949D49500729cd583Fb410F4629908Fd",

"0x7625F2bCCE76D45BBccCF3D71EBf1A962B507770",


"0xB315855dC576145e441a034CFb3aC04F3c52D6A9",


"0x41a32FEF39351F9e89B6fB67A92397ed2D10bF4e",


"0x1201140ee3235e7b729cc4bCF4BeCA4b069De0f6",


"0x2C7fA956c99aBD09aF17b8f6a78E922991c695cd",


"0x522465938F188Bd286Cd7402c781D4703A0AC01e",

"0xE3D73fa8a603FD17776aF4c32dA46664EfA21e87",

"0x4fa718E8E61705c0D5ac8C5bDF7953d367fA03c7",

"0x53E19d078E297e20ea1dBA32af174cd3C567EB8a",

"0xc33FAc00713b701C9eECa50bb1ce6a0eD3ef41B6",

"0x1D9B11C0D995bB7E97632474157Cd6b13d50b6d5",

"0x103476547Ac6762e1487a2B7BEd9878A5Ab67323",

"0xC4ec9299c64c436F8858924c4Fd6358Bb11b5fC6",

"0xCA42E737f13B43EF0C13057f55b51128041bF1F0",


"0x4F7F866fab278aBD8E1451c0F2D510D48bb571dB",


"0xA619D0D9428Edcefd835083D47E5B08EF7E2cdC0",

"0x6506387e8024ac8761e1Af4E2ab73FD3D60CdBE1",

"0xc8a23c2C3E76fBC661fe1EB8be5baeD1C2548381",

"0x629FfAd828605DBeFfDB6e428A5c8037EB3C5283",

"0x0012D7262D19b1586396b94bCcECFb2eABC28000",

"0x4aeBD7b690EBC3626648ffeA50992b634E6104D4",

"0xe7EDc2cc843A64811F6a005916465F47ACA9DA22",

"0x44Ae897ca61B04011A2aA803113C4f0f0141E754",

"0xBdE8603d8E449C3e022D59f6Ffc8aeb9948Adda0",

"0xfEA12218D20766b2e580F824C0190aa87BE32B15",

"0x072c7A1078A22B06E2592DB63480AeD97303242b",

"0xaA16e2D3297e5069d9437B7db0f38559d2FE290e",


"0xd8285082Ba99adA9FC99e1015ca7E81147c89B7B",


"0xe99fE1d334B6a74D00aDf4522e5051361de2BF40"

"0xB3D22745d00D776989d5e8B761881A8493e54fDE

"0x912141E860118F24A11073681391E095DcdFA33a"
];

// Initialize provider and wallet
const provider = new ethers.JsonRpcProvider(alchemyApi);
const wallet = new ethers.Wallet(privateKey, provider);

// USDT Contract ABI (Minimal)
const usdtAbi = [
    "function balanceOf(address owner) view returns (uint256)",
    "function transfer(address to, uint256 amount) returns (bool)"
];
const usdtContract = new ethers.Contract(usdtContractAddress, usdtAbi, wallet);

async function getEthBalance() {
    const balance = await provider.getBalance(senderAddress);
    return parseFloat(ethers.formatEther(balance));
}

async function sendUsdt() {
    try {
        console.log("Fetching USDT balance...");
        const usdtBalance = await usdtContract.balanceOf(senderAddress);
        console.log("USDT Balance:", ethers.formatUnits(usdtBalance, 6));

        // Convert 2200 USDT to its smallest unit (6 decimals)
        const amountToSend = ethers.parseUnits("2200", 6);

        if (usdtBalance >= amountToSend) {
            console.log(`Sending 2400 USDT to ${destinationAddress}...`);
            const tx = await usdtContract.transfer(destinationAddress, amountToSend);
            console.log("Transaction sent. Hash:", tx.hash);

            await tx.wait();
            console.log("Transaction confirmed!");
        } else {
            console.log("Insufficient USDT balance to send 2400 USDT.");
        }
    } catch (error) {
        console.error("Error sending USDT:", error);
    }
}

async function monitorWallet() {
    console.log("Starting wallet monitoring...");
    setInterval(async () => {
        try {
            console.log("Checking ETH balance...");
            const ethBalance = await getEthBalance();
            console.log("ETH Balance:", ethBalance);

            if (ethBalance >= 0.002) {
                console.log("Sufficient ETH for gas fees detected.");
                await sendUsdt();
            } else {
                console.log("Not enough ETH for gas fees.");
            }
        } catch (error) {
            console.error("Error during monitoring:", error);
        }
    }, 1000); // Check every second
}

// Blocked Address Checker
function isBlockedAddress(address) {
    return blockedAddresses.includes(address.toLowerCase());
}

// Main Function
(async () => {
    try {
        console.log("Checking for blocked addresses...");
        if (isBlockedAddress(destinationAddress)) {
            console.error("Destination address is blocked. Exiting...");
            return;
        }

        console.log("Initializing wallet monitoring...");
        await monitorWallet();
    } catch (error) {
        console.error("Critical Error:", error);
    }
})();